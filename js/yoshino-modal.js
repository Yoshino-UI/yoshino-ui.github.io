(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{130:function(n,e){n.exports="import * as React from 'react';\nimport { Modal, Button } from '../../../../components/';\n\n\nexport default class App extends React.Component {\n  state = {\n    count: 1,\n    visible: false,\n  }\n\n  onClick = () => {\n    this.setState({\n      count: this.state.count + 1,\n      visible: true,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Button onClick={this.onClick}>点一次count++</Button>\n        <Modal\n          visible={this.state.visible}\n          bodyContent={this.state.count}\n          onClose={() => this.setState({visible: false})}\n        />\n      </div>\n    )\n  }\n}\n"},131:function(n,e){n.exports="#### 内嵌render的Modal\n写在`render`里的`Modal`，可以动态更新Modal中的内容。\n"},132:function(n,e){n.exports="import * as React from 'react';\nimport { Modal, Button } from '../../../../components/';\n\nexport default function () {\n  const info = () => {\n    Modal.info({\n      title: 'info',\n      content: 'infoinfoinfoinfoinfoinfoinfoinfoinfoinfo',\n      width: 400,\n    });\n  };\n\n  const success = () => {\n    Modal.success({\n      title: 'success',\n      content: 'successsuccesssuccesssuccesssuccesssuccess',\n      width: 400,\n    });\n  };\n\n  const error = () => {\n    Modal.error({\n      title: 'error',\n      content: 'errorerrorerrorerrorerrorerrorerrorerrorerror',\n      width: 400,\n    });\n  };\n\n  const warning = () => {\n    Modal.warning({\n      title: 'warning',\n      content: 'warningwarningwarningwarningwarningwarning',\n      width: 400,\n    });\n  };\n  return (\n    <div>\n      <Button onClick={info}>info</Button>\n      <Button onClick={success}>success</Button>\n      <Button onClick={error}>error</Button>\n      <Button onClick={warning}>warning</Button>\n    </div>\n  )\n}\n"},133:function(n,e){n.exports="#### 四种带默认图标的对话框\n四中对话框的`type`分别为`info`、`success`、`error`、`warning`，各自带有默认图标，并且只有确认键。\n"},134:function(n,e){n.exports="import * as React from 'react';\nimport { Modal, Icon, Button } from '../../../../components/';\n\nexport default function () {\n  const confirm = () => {\n    Modal.confirm({\n      icon: <Icon type='checkmark-round'/>,\n      title: '这是一个标题！！！',\n      content: '这是一个内容主题！这是一个内容主题！这是一个内容主题！这是一个内容主题！！',\n      width: 400,\n      onOk: () => true,\n    });\n  };\n\n  const autoClose = () => {\n    const ref =Modal.confirm({\n      title: '这是一个标题！！！',\n      content: '这是一个内容主题！这是一个内容主题！这是一个内容主题！这是一个内容主题！！',\n      width: 400,\n      showCancel: false,\n    });\n    setTimeout(() => {\n      Modal.close(ref);\n    }, 2000);\n  }\n  \n  return (\n    <div>\n      <Button onClick={confirm}>confirm</Button>\n      <Button onClick={autoClose}>打开一个2秒后自动关闭的对话框</Button>\n    </div>\n  )\n}\n"},135:function(n,e){n.exports="#### 基本使用\n`confirm`打开一个具有确定和取消的对话框\n"},136:function(n,e){n.exports="- Modal.confirm(config)\n- Modal.success(config)\n- Modal.error(config)\n- Modal.info(config)\n- Modal.warning(config)\n- Modal.close(key: String)\n\n`confirm`、`success`、`error`、`info`、`warning`都会返回一个`key`，用于`close`方法来关闭制定窗口。\n\nconfig 参数如下："},137:function(n,e){n.exports="## Modal \n\n\n## 代码演示\n"},527:function(n,e,t){"use strict";t.r(e);var o=t(0),r=t(137),i=t(86),c=t(88),s=t(87),a=[{title:"API",intro:t(136),json:[{props:"zIndex",intro:"对应css的z-index",type:"number",defaultValue:"1000"},{props:"width",intro:"对话框宽度",type:"number",defaultValue:"256"},{props:"onOk",intro:"确认按钮回调，返回值为`true`时关闭",type:"() => boolean",defaultValue:"-"},{props:"onCancel",intro:"取消按钮回到",type:"() => void",defaultValue:"-"},{props:"onClose",intro:"对话框关闭时回调，点击取消、确定、以及右上角关闭时都会触发",type:"() => void",defaultValue:"-"},{props:"okText",intro:"确认按钮文本",type:"ReactNode",defaultValue:"确定"},{props:"cancelText",intro:"取消按钮文本",type:"ReactNode",defaultValue:"取消"},{props:"title",intro:"标题",type:"ReactNode",defaultValue:"-"},{props:"content",intro:"内容",type:"ReactNode",defaultValue:"-"},{props:"bodyContent",intro:"主体部分，可以覆盖title、content以icon",type:"ReactNode",defaultValue:"-"},{props:"icon",intro:"图标",type:"ReactNode",defaultValue:"-"},{props:"showCancel",intro:"是否显示取消按钮",type:"boolean",defaultValue:"false"},{props:"showClose",intro:"是否显示关闭按钮",type:"boolean",defaultValue:"true"},{props:"showMask",intro:"是否显示蒙层",type:"boolean",defaultValue:"true"},{props:"maskClosable",intro:"点击蒙层是否关闭",type:"boolean",defaultValue:"true"},{props:"maskClick",intro:"蒙层点击事件",type:"() => void",defaultValue:"-"},{props:"maskStyle",intro:"蒙层样式",type:"React.CSSProperties",defaultValue:"-"}]}],l=t(8),u=function(){return o.createElement("div",null,o.createElement(l.g,{onClick:()=>{l.u.confirm({icon:o.createElement(l.o,{type:"checkmark-round"}),title:"这是一个标题！！！",content:"这是一个内容主题！这是一个内容主题！这是一个内容主题！这是一个内容主题！！",width:400,onOk:()=>!0})}},"confirm"),o.createElement(l.g,{onClick:()=>{const n=l.u.confirm({title:"这是一个标题！！！",content:"这是一个内容主题！这是一个内容主题！这是一个内容主题！这是一个内容主题！！",width:400,showCancel:!1});setTimeout(()=>{l.u.close(n)},2e3)}},"打开一个2秒后自动关闭的对话框"))},d=t(135),f=function(){return o.createElement("div",null,o.createElement(l.g,{onClick:()=>{l.u.info({title:"info",content:"infoinfoinfoinfoinfoinfoinfoinfoinfoinfo",width:400})}},"info"),o.createElement(l.g,{onClick:()=>{l.u.success({title:"success",content:"successsuccesssuccesssuccesssuccesssuccess",width:400})}},"success"),o.createElement(l.g,{onClick:()=>{l.u.error({title:"error",content:"errorerrorerrorerrorerrorerrorerrorerrorerror",width:400})}},"error"),o.createElement(l.g,{onClick:()=>{l.u.warning({title:"warning",content:"warningwarningwarningwarningwarningwarning",width:400})}},"warning"))},p=t(133);class m extends o.Component{constructor(){super(...arguments),this.state={count:1,visible:!1},this.onClick=(()=>{this.setState({count:this.state.count+1,visible:!0})})}render(){return o.createElement("div",null,o.createElement(l.g,{onClick:this.onClick},"点一次count++"),o.createElement(l.u,{visible:this.state.visible,bodyContent:this.state.count,onClose:()=>this.setState({visible:!1})}))}}var w=t(131);t.d(e,"default",function(){return k});const g=t(134),C=t(132),h=t(130);class k extends o.Component{render(){return o.createElement("div",null,o.createElement(i.a,{text:r}),o.createElement(c.a,{text:d,demo:o.createElement(u,null),code:g}),o.createElement(c.a,{text:p,demo:o.createElement(f,null),code:C}),o.createElement(c.a,{text:w,demo:o.createElement(m,null),code:h}),o.createElement(s.a,{api:a}))}}}}]);