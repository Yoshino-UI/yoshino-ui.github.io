(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{107:function(n,e){n.exports="import * as React from 'react';\nimport { Message as message, Button } from '../../../../components/';\n\nexport default function() {\n  \n  const success = () => {\n    message.success({\n      content: 'success success success!',\n    });\n  }\n\n  const info = () => {\n    message.info({\n      content: 'info info info!',\n    });\n  }\n\n  const warn = () => {\n    message.warn({\n      content: 'warn warn warn!',\n    });\n  }\n\n  const error = () => {\n    message.error({\n      content: 'error error error!',\n    });\n  }\n\n  const destroy = () => {\n    message.destroy();\n  }\n  return (\n    <div>\n      <Button onClick={success}>success</Button>\n      <Button onClick={info}>info</Button>\n      <Button onClick={warn}>warn</Button>\n      <Button onClick={error}>error</Button>\n      <Button onClick={destroy}>点我清空所有message</Button>\n    </div>\n  );\n}\n"},108:function(n,e){n.exports="#### 基本使用\n带有类别以及图标的通知为分别为`success`、`info`、`warning`、`error`，可以使用`destroy`清空所有通知，也可以使用`close`传入`key`关闭指定的通知。通知默认`5 秒`后自动关闭，可以通过`config`配置修改默认值，也可以作为参数传入。\n"},109:function(n,e){n.exports="提供全局配置方法，在调用前提前配置，全局一次生效。\n\n- notification.config(options)\n\n```jsx\nnotification.config({\n  placement: 'topLeft',\n  duration: 2000,\n});\n```"},110:function(n,e){n.exports="- message.success(config)\n- message.error(config)\n- message.info(config)\n- message.warn(config)\n- message.close(key: String)\n- message.destroy()\n\n`open`、`success`、`error`、`info`、`warn`都会返回一个`key`，用于`close`方法来关闭制定窗口。\n\nconfig 参数如下："},111:function(n,e){n.exports="## Message \n用于全局提示用户相关信息。\n\n- 用于通知、警告、成功和错误等信息。\n- 默认顶部居中显示同时会在`3s`后自动消失。\n\n## 代码演示\n"},496:function(n,e,t){"use strict";t.r(e);var o=t(0),r=t(111),s=t(86),c=t(88),i=t(87),a=[{title:"API",intro:t(110),json:[{props:"key",intro:"当前通知唯一标志",type:"string | number",defaultValue:"-"},{props:"duration",intro:"当前通知自动关闭时间，单位`ms`",type:"number",defaultValue:"5000"},{props:"icon",intro:"自定义图标",type:"ReactNode",defaultValue:"-"},{props:"content",intro:"通知信息详情",type:"ReactNode | string",defaultValue:"-"},{props:"onClose",intro:"点击关闭按钮时触发的回调函数",type:"() => void",defaultValue:"-"}]},{title:"API - 全局配置",intro:t(109),json:[{props:"top",intro:"竖直方向距离浏览器窗口间距，等同于`top`单位`px`",type:"number",defaultValue:"24"},{props:"duration",intro:"当前通知自动关闭时间，单位`ms`",type:"number",defaultValue:"5000"}]}],u=t(8),l=function(){return o.createElement("div",null,o.createElement(u.g,{onClick:()=>{u.t.success({content:"success success success!"})}},"success"),o.createElement(u.g,{onClick:()=>{u.t.info({content:"info info info!"})}},"info"),o.createElement(u.g,{onClick:()=>{u.t.warn({content:"warn warn warn!"})}},"warn"),o.createElement(u.g,{onClick:()=>{u.t.error({content:"error error error!"})}},"error"),o.createElement(u.g,{onClick:()=>{u.t.destroy()}},"点我清空所有message"))},f=t(108);t.d(e,"default",function(){return m});const p=t(107);class m extends o.Component{render(){return o.createElement("div",null,o.createElement(s.a,{text:r}),o.createElement(c.a,{text:f,demo:o.createElement(l,null),code:p}),o.createElement(i.a,{api:a}))}}}}]);